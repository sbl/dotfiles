snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:,}
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet for "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--) {
	${3:$1[$2]}${VISUAL}$0
};
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}${VISUAL}$0
};
endsnippet

snippet f "anonymous function"
function(${1:args}) {
  ${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name} (${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet if "if"
if (${1:condition}) {
  ${VISUAL}$0
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
  ${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log(${1:'${2:value}'});
endsnippet

snippet cw "console.warn"
console.warn(${1:'${2:value}'});
endsnippet

snippet ce "console.error"
console.error(${1:'${2:value}'});
endsnippet

# Jasmine and e2e

snippet desc "describe jasmine"
describe('$1', function() {
  ${0:// scenario}
});
endsnippet

snippet it "it - example"
it('$1', function() {
  ${0:// expectation}
});
endsnippet

snippet iti "it - example with injection"
it('$1', inject(function($2) {
  ${0:// expectation}
}));
endsnippet

snippet exp "expectation"
expect($1).to$2($0);
endsnippet

snippet bef "beforeEach"
beforeEach(function() {
  $1
});
endsnippet

snippet befi "before - with injection"
beforeEach(inject(function($1) {
  $0
}));
endsnippet

snippet aft "afterEach"
afterEach(function() {
  $0
});
endsnippet

snippet brow "broswer()"
browser().$1
endsnippet

snippet navi "navigate"
browser().navigateTo('/$1');
endsnippet

# vim:ft=snippets:
