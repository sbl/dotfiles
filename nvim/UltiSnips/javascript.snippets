snippet for "for (...) {...}"
for (let ${2:i}=0 $2 < ${1:Things}.length $2++) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet /\= f/ "anonymous function in assignment" r
= (${1:args}) => {
	$0
}
endsnippet

snippet /\, f/ "embedded anonymous function 1" r
, (${1:args}) => {
	$0
})
endsnippet

snippet /\(f/ "embedded anonymous function 2" r
((${1:args}) => {
	$0
})
endsnippet

snippet fun "function (fun)"
const ${1:fun} = (${2:argument}) => {
	$0
}
endsnippet

snippet if "if"
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log('$1', $1)$0
endsnippet

snippet cw "console.warn"
console.warn('$1'$0)
endsnippet

snippet ce "console.error"
console.error('$1'$0)
endsnippet

# tests

snippet desc "mocha describe"
describe('$1', () => {
	$0
})
endsnippet

snippet it "mocha it"
it('$1', () => {
	$0
})
endsnippet

snippet itd "mocha it async"
it('$1', (done) => {
	$0
	done()
})
endsnippet

snippet exp "expectation"
expect($1).to${2:Equal}($0)
endsnippet

snippet test "react test"
test('$1', () => {
	$0
})
endsnippet

snippet react "react functional component"
// @flow

import React from 'react'

const ${1:Component} = (props) => {
	return <div>
	</div>
}

export default $1
endsnippet

snippet react "react class component"
// @flow

import React, { Component } from 'react'

type Props = {}
type State = {}

export default class ${1:Component} extends Component<Props, State> {
	render () {
		return <div></div>
	}
}
endsnippet
# vim:ft=snippets:
