# Snippets for Go

# statements
snippet for "For loop" !b
for ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet forr "For range loop" !b
for ${2:_}, ${3:item} := range ${1:collection} {
	${0:${VISUAL}}
}
endsnippet

snippet fors "for select loop" !b
for {
	select {
	case $0:
	}
}
endsnippet

snippet if "If statement" !b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet ife "If err statement" !b
if err != nil {
	${0:${VISUAL}}
}
endsnippet

snippet switch "Switch statement" !b
switch ${1:expression}${1/(.+)/ /}{
case${0}
}
endsnippet

# functions
snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

# types and variables
snippet map "Map type" !b
map[${1:keytype}]${2:valtype}
endsnippet

snippet test "Test Case" !b
func Test${1:Description}(t *testing.T) {
	${0:${VISUAL}}
}
endsnippet

snippet /\(wr/ "handler signature" r
(w http.ResponseWriter, r *http.Request)
endsnippet

snippet /\(cwr/ "context handler signature" r
(ctx context.Context, w http.ResponseWriter, r *http.Request)
endsnippet

snippet ass "assertion like"
if exp, got := ${1:exp}, ${2:got}; ${3:exp != got} {
	t.Errorf("expected %+v, got %+v", exp, got)
}
endsnippet

snippet middleware "generic middleware"
func ${1:name}(next http.Handler) http.Handler {
	fn := func(w http.ResponseWriter, r *http.Request) {
		${0://}
		next.ServeHTTP(w, r)
	}
	return http.HandlerFunc(fn)
}
endsnippet

# vim:ft=snippets:
