# Snippets for Go

# statements
snippet for "For loop" !b
for ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet forr "For range loop" !b
for ${2:name} := range ${1:collection} {
	${0:${VISUAL}}
}
endsnippet

snippet if "If statement" !b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet ife "If err statement" !b
if err != nil {
	${0:${VISUAL}}
}
endsnippet

snippet switch "Switch statement" !b
switch ${1:expression}${1/(.+)/ /}{
case${0}
}
endsnippet

snippet case "Case clause" !b
case ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet default "Default clause" !b
default:
	${0:${VISUAL}}
endsnippet

# functions
snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /^meth/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

# types and variables
snippet map "Map type" !b
map[${1:keytype}]${2:valtype}
endsnippet

snippet : "Variable declaration :=" !b
${1:name} := ${0:value}
endsnippet

snippet test "Test Case" !b
func Test${1:Description}(t *testing.T) {
	${0:${VISUAL}}
}
endsnippet

snippet /\(wr/ "handler signature" r
(w http.ResponseWriter, r *http.Request
endsnippet

snippet ass "assertion like"
if act, exp := ${1:act}, ${2:exp}; ${3:act != exp} {
	t.Errorf("expected %#v, got ${4:equal} %#v", act, exp)
}
endsnippet

# vim:ft=snippets:
