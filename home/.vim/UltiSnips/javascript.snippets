snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet for "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--) {
	${3:$1[$2]}${VISUAL}$0
};
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}${VISUAL}$0
};
endsnippet

snippet f "anonymous function"
function(${1:args}) {
	$0
}
endsnippet

snippet /\(f/ "embedded anonymous function" r
(function(${1:args}) {
	$0
})
endsnippet

snippet co "co block"
co(function*() {
	$0
})();
endsnippet

snippet fun "function (fun)"
function ${1:fun}(${2:argument}) {
	$0
}
endsnippet

snippet if "if"
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet args "arguments array"
var args = Array.prototype.slice.call(arguments);
endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log('$1'$0);
endsnippet

snippet cw "console.warn"
console.warn('$1'$0);
endsnippet

snippet ce "console.error"
console.error('$1'$0);
endsnippet

# qunit

snippet test "qunit test"
test('${1:description}', function() {
  $0
});
endsnippet

snippet module "qunit module"
module('${1:module name}'${2:, {
  setup: function() {
  },
  teardown: function() {
  }
}});
endsnippet

snippet integration "ember integration test"
import startApp from '${1:appName}/tests/helpers/start-app';

var App;

module('Integration: ${2:what}', {
  setup: function() {
    App = startApp();
  },
  teardown: function() {
    Ember.run(App, 'destroy');
  }
});
endsnippet

snippet equal "qunit equal"
equal(${1:actual}, ${2:expected});
endsnippet

snippet ok "qunit ok"
ok(${1:state}${2:, '${3:message}'});
endsnippet

snippet desc "mocha describe"
describe('$1', function() {
	$0
});
endsnippet

# mocha

snippet it "mocha it"
it('$1', function() {
	$0
});
endsnippet

snippet itd "mocha it async"
it('$1', function(done) {
	$0
	done();
});
endsnippet
# vim:ft=snippets:
