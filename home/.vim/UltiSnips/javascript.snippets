snippet for "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--) {
	${3:$1[$2]}${VISUAL}$0
};
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}${VISUAL}$0
};
endsnippet

snippet /\= f/ "anonymous function in assignment" r
= (${1:args}) => {
	$0
};
endsnippet

snippet /\, f/ "embedded anonymous function 1" r
, (${1:args}) => {
	$0
})
endsnippet

snippet /\(f/ "embedded anonymous function 2" r
((${1:args}) => {
	$0
})
endsnippet

snippet fun "function (fun)"
function ${1:fun}(${2:argument}) {
	$0
}
endsnippet

snippet if "if"
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log('$1'$0);
endsnippet

snippet cw "console.warn"
console.warn('$1'$0);
endsnippet

snippet ce "console.error"
console.error('$1'$0);
endsnippet

snippet this "_this"
var _this = this;
$0
endsnippet

# qunit

snippet test "qunit test"
test('${1:description}', function() {
	$0
});
endsnippet

snippet equal "qunit equal"
equal(${1:actual}, ${2:expected});
endsnippet

snippet ok "qunit ok"
ok(${1:state}${2:, '${3:message}'});
endsnippet

snippet desc "mocha describe"
describe('$1', function() {
	$0
});
endsnippet

# mocha

snippet it "mocha it"
it('$1', function() {
	$0
});
endsnippet

snippet itd "mocha it async"
it('$1', function(done) {
	$0
	done();
});
endsnippet

snippet react "react component"
class ${1:Component} extends React.Component {
	constructor(props) {
		super(props);
	}

	render() {
		return (
			$0
		);
	}
}
endsnippet

snippet c "const"
const ${1:name} = $0;
endsnippet

# vim:ft=snippets:
